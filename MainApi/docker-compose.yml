services:
  main-api:
    build:
      dockerfile: Dockerfile
      target: build
    command:
      [
        "dotnet",
        "watch",
        "--project",
        "ECommerce.Presentation",
        "--no-hot-reload",
        "--launch-profile",
        "http",
      ]
    ports:
      - 5042:8080

    environment:
      ASPNETCORE_URLS: http://+:8080
      ASPNETCORE_ENVIRONMENT: Development
      Logging__LogLevel__Default: Debug
      Logging__LogLevel__Microsoft: Warning
      Logging__LogLevel__Microsoft.AspNetCore: Warning
      STRIPE_API_KEY: ${Stripe__ApiKey}
      STRIPE_WEBHOOK_SIGNATURE: ${Stripe__WebhookSignature}
      Master__Email: ${Master__Email}
      Master__Password: ${Master__Password}
      Database__Host: main-api-postgres
      Database__Port: 5432
      Database__Database: ${Database__Database}
      Database__Username: ${Database__Username}
      Database__Password: ${Database__Password}
      MicroserviceNetworkConfig__PaymentServiceUrl: http://payment-service:8080/api
      Kafka__Servers: kafka:9092
    volumes:
      - ./ECommerce.Presentation/src:/app/ECommerce.Presentation/src
      - ./ECommerce.Infrastructure/src:/app/ECommerce.Infrastructure/src
      - ./ECommerce.Application/src:/app/ECommerce.Application/src
      - ./ECommerce.Domain/src:/app/ECommerce.Domain/src
    depends_on:
      main-api-postgres:
        condition: service_healthy
  main-api-postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: ${Database__Username}
      POSTGRES_PASSWORD: ${Database__Password}
      POSTGRES_DB: ${Database__Database}
    volumes:
      - ./SqlInit:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      retries: 10
      timeout: 10s
